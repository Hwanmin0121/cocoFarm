
모든 IDX 처리와 REGDATE 처리는 트리거로 할 예정
(조건문 처리를 해서 직접 기입하는 것도 가능 하게)

문자열은 무조건 UTF-8로 강제하기 위해 nvarchar2, nchar, nclob 이용중

------------------------------------------------  계정 코드 ----------------------------------------------------
1:관리자 2:일반계정 3:사업자계정
ACCOUNT_TYPE
	#CODE		number(2,0) (그냥 혹시 나중에 회원등급 같은게 있을까 해서 두자리. 별 의미는 없음)

------------------------------------------------  계정  ----------------------------------------------------

ACCOUNT
	#IDX			number(8,0)		(인조식별자. 각종 아이디 참조 처리 시 아이디 문자열을 직접 이용하지 않게 처리.)
	ID				nchar(15)		(아이디 바꾸는 것을 허용해도 사실 컨셉상의 차이 외에는 문제가 없음. PW와 함께 인덱스 처리를 할 예정이라 고정길이 속성으로 정함.)
	PW				nchar(30)		(ID와 함께 묶어서 인덱스 처리를 할 예정이라 고정길이 속성으로 정함. 큰 의미는 없음.)
	NAME			nvarchar2(20)	(이름, 20자까지)

	EMAIL			nvarchar2(30)	(이메일 자리수가 어떻게 되는지 예상이 안되니까 일단 30자. 이부분도 UTF-8 로 받는걸로 가정)

	PHONE			number(14,0)
	PHONE2			number(14,0)	(전화번호 2개를 입력하게 하려면 추가하는 속성. 혹시 모르니 일단 여유를 둔 자리수)

	POSTNUM			number(8,0)		(몇 년에 한번씩 만만하면 바꾸는게 우편번호니까 여유를 두고 8자. 그 외에는 자리수에 별 의미는 없음)
	PRIVINCE		nvarchar2(4)	('도'. 설마 '도' 가 5글자 짜리가 새로 생기지는 않을 테니까)
	CITY			nvarchar2(8)	(시/군/구 일단 8자)
	DETAILED_ADDR	nvarchar2(50)	(시/군/구 이후 주소)

	ACCOUNT_TYPE	number(2,0)			(회원 형태 비즈니스 코드. 1:관리자 2:일반계정 3:사업자계정)
	THUMB_LOC		varchar2(100 char)	(혹시 이미지를 여럿 넣게 된다면 아예 다른 구조를 필요로 하게 될 수도 있음. 일단은 썸네일만 받기로 했으니까 속성 1개로 처리. 유일하게 UTF-8 을 강제 안하는 문자 속성)

	REG_DATE		timestamp (0) with local time zone (아이디 등록 일자를 그냥 '초' 까지 넣는걸로 정함. '일' 까지라면 그냥 date 타입으로 바꿔도 무방.)


------------------------------------------------  사업자 정보  ----------------------------------------------------

BUSINESS_INFO
	#ACC_IDX						number(8,0)		(계정 기본키 참조)
	#BUSINESS_LICENSE_CODE			number(10,0)	('-'을 제거하고 숫자로 넣는 식으로 처리. 10자리인게 바뀌지는 않을 거라고 가정, 이 구조에서 계정당 여러개의 사업자 정보를 등록이 가능. 구현은 선택의 문제)
	CORPORATION_NAME				nvarchar2(20)	(회사명이 설마 20자리를 넘지는 않을 테니까..)
	REPRESENTATIVE					nvarchar2(20)	(대표자명. 20자리를 넘는 이름을 가진 사람은 안받아줌)
	
	BUSINESS_LOC_PROVINCE			nvarchar2(4)	(사업장 주소 '도')
	BUSINESS_LOC_CITY				nvarchar2(8)	(사업장 주소 '시/군/구')
	BUSINESS_LOC_DETAILED_ADDR		nvarchar2(50)	(사업장 주소 시/군/구 이후 주소)
	
	HEADHQUARTER_LOC_PROVINCE		nvarchar2(4)	(본점 주소 '도')
	HEADHQUARTER_LOC_CITY			nvarchar2(8)	(본점 주소 '시/군/구')
	HEADHQUARTER_LOC_DETAILED_ADDR	nvarchar2(50)	(본점 주소 시/군/구 이후 주소)
	
	BUSINESS_CATEGORY				nvarchar2(25)	(사업 업태. 글자수 제한이 어떻게 되는지 모르니 임의로 25자..ex:'수산식물 가공 및 저장 처리업')
	BUSINESS_TYPE					nvarchar2(25)	(사업 종류. 업태와 마찬가지로 처리)
	
	REG_DATE						timestamp (0) with local time zone (사업자 등록 일자를 그냥 '초' 까지 넣는걸로 정함. '일' 까지라면 그냥 date 타입으로 바꿔도 무방)

계정 기본키와 사업자 등록번호를 합쳐 복합 기본키로 설정. 만일 사업자 계정 1개당 등록번호 1개 만을 허용한다면, 계정 기본키 참조 속성 하나만을 기본키로 설정.


------------------------------------------------  장바구니  ----------------------------------------------------

CART
	#ACC_IDX		number(8,0)		(장바구니 주인 계정번호 참조 외래키)
	#SALE_IDX		number(11,0)	(판매글번호 참조 외래키)
	COUNT			number(3,0)		(갯수, 설마 999개 이상의 단위가 필요하지는 않을거라 생각하고 정함. 사실 이런 디테일은 별 의미 없음)

ACC_IDX 와 SALE_IDX 을 묶어서 기본키 처리. -> 장바구니에 이미 있는 목록에 또 추가버튼을 누르거나 하는 식의 작동방식은 일단 어플리케이션에서 잘 처리해야 함. (아니면 트리거를 쓸 수도 있고.)


------------------------------------------------  쪽지  ----------------------------------------------------

MESSAGE
	#IDX			number(11,0)		(기본키 인조식별자)
	ACC_IDX			number(8,0)			(대상 계정 기본키 참조 외래키)
	CONTENT			nvarchar2(1000,0)	(일단 1000자. 사실 시스템 알림이 길 필요가 전혀 없으니 크게 줄여도 됨)
	IS_READ			number(1,0)			default 0 (읽으면 1 안읽으면 0. view 를 만들어서 처리하면, 굳이 어플리케이션에서 조회 처리를 안해도 될 수 있음)

IS_READ 와 IDX를 묶어 인덱스를 만들까 생각중. (어차피 안보이는 부분인데, 만일 어떻게든 보여줄 수 있다면 추가)


------------------------------------------------  1:1 문의  ----------------------------------------------------

ACCOUNT_SUPPORT
	#IDX			number(10,0)		(기본키 인조식별자)
	ACC_IDX			number(8,0)			(문의한 계정 번호 참조 외래키)
	CONTENT			nvarchar2(2000,0)	(문의 사항 내용. 그냥 내맘대로 2000자.)
	
	WRITTEN_TIME	timestamp (0) with local time zone (등록시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸면 되는데, 비추천)
	
	ANS_ACC_IDX		number(8,0)			(문의를 응답한 관리자 계정 번호 참조 외래키)
	ANSWER			nvarchar2(2000,0)	(답변내용, 문의 한번에 답변 한번으로 제한하는 구조. 다른 방식으로 한다면 댓글 식으로 하거나 뭔가 다른 구조로 바꿔야함)
	ANSWER_TIME		timestamp (0) with local time zone (답변시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)


------------------------------------------------  오늘의 농부  ----------------------------------------------------

(나중에 다른 게시판 나오는 모양이 비슷하면 하나로 합칠 수도 있지만 매우 비추천)

TODAYS_FARMER
	#IDX			number(6,0)		(기본키.인조식별자를 이용한 글번호 처리. 혹시 삭제가 되더라도 빈 번호를 채울 필요가 전혀 없음. 오늘의 농부 게시판 규칙을 사업자 계정 1개당 1개 글 제한할 시, 그냥 ACC_IDX를 기본키로 둘 수 있음)
	ACC_IDX			number(8,0)		(계정 식별자 참조 외래키)

	TITLE			nvarchar2(30)	(제목 30자)
	CONTENT			nclob			(내용 clob. 각종html 이랑 여러가지 내용의 추가를 지원. 대신 문자열로 바꾸기 위해서 to_nclob 함수 이용. 불편하고 쓸데없다 싶으면 nvarchar2 로 변경)
	WRITTEN_TIME	timestamp (0) with local time zone (등록시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)
	
	VIEW_COUNT		number(9,0)		(조회수 필요하면 넣기, 아이디당 조회수를 1개로 제한하려면 별도의 테이블 작성 필요. 일단은 간단한 프로토 타입 버전이라 그런 부분은 고려 안함.)
	LAST_EDITED		timestamp (0) with local time zone (마지막 수정 시간 기록하려면 넣기. 이것도 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸기)

	THUMB_UP		number(8,0)		(추천수, 꼭 필요한 속성은 아님. 그냥 매번 추천수 테이블 전체조회 없이 처리하도록 해 주는 속성. 비추천 없이 추천만 넣는다면 속성이름도 RECOMMEND 로 변경하는게 알아보기 좋음.)
	THUMB_DOWN		number(8,0)		(비추천, 그냥 일단 넣어둠. 추천과 같은 작동 방식)
	SCORE	( 점수를 줄 것인지, 추천만 줄 것인지, 추천/비추천을 할 것인지 선택해서 열을 넣어야 됨)

	IMG
		(이미지를 여러 개 첨부 하게 하려면 테이블을 따로 생성. 타입도 여러가지를 두려면 좀 더 복합적인 테이블 구조가 필요. 물론 이미지가 아주 필요 없다면 아예 이 열이 필요 없음)


------------------------------------------------  오늘의 농부 추천(일단 추천식으로 가정)  ----------------------------------------------------

TODAYS_FARMER_RECOMMEND					(일단은 '추천' 만 있는걸로 가정 -학원 예제 처럼)
	#ACC_IDX				number(8,0)	(계정 식별자 참조 외래키)
	#TODAYS_FARMER_IDX		number(6,0)	(오늘의 농부 글 번호 참조 외래키)

두 속성을 합쳐 복합 기본키로 설정.


------------------------------------------------  오늘의 농부 댓글 ----------------------------------------------------

TODAYS_FARMER_COMMENT						(오늘의 농부 댓글)	(나중에 다른 게시판 댓글 나오는 모양을 봐서 하나로 합칠 수도 있지만, 데이터의 기본 개념상 매우 비추천)
	#IDX					number(10,0)	(기본키 댓글 번호. 크기는 임의로 글 당 평균 만개 이하 까지 지원하게 둠. 이런 디테일은 프로젝트에서 전혀 중요하지 않은 부분이니 그냥 적당히 정함.)
	TODAYS_FARMER_IDX		number(6,0)		(오늘의 농부 글번호 참조 외래키)
	ACC_IDX					number(8,0)		(계정 식별자 참조 외래키)
	CONTENT					nvarchar2(200)	(댓글은 짧게 200자 제한)

	WRITTEN_TIME			timestamp (0) with local time zone (등록시간. '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)
	LAST_EDITED				timestamp (0) with local time zone (마지막 수정 시간 기록하려면 넣기. 이것도 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸기)

	SUPER_COMMENT			number(11,0)	(대댓글 만들고 싶으면 넣기, 자기 기본키 참조 외래키. scott예제의 직속 상사 코드 같은 형태)

이외에 추천을 댓글에 종속되게 하거나 하려면 변경이 있어야 함.
글 별로 댓글 번호를 따로 처리하려면 ROWNUM을 이용해서 보이는 번호만 그럴듯 하게 만들기.


---------------------------------------------- 여타 게시판 추가 예정(게시판은 다 비슷비슷하게 나올 듯?) ----------------------------------------------------


---------------------------------------------- 사이트 배너 관리 ----------------------------------------------------

SITE_IMG_SETTING
	BANNER_LOC		varchar2(100 char)	(이미지 위치)

1개 배너를 위해 만들고 다른 이미지 관리를 전혀 지원 안하면, 1개 행이 들어가는 테이블이 됨.
이미지들 여러개를 관리하기 위해 그냥 img_type 같은 속성을 하나 추가하고, 카테고리 관리 테이블을 따로 두는게 더 나을 수 있지만 일단 프로토 타입이라 이렇게 둠.


---------------------------------------------- 메인 노출 경매 설정 ----------------------------------------------------

SITE_MAIN_AUCTION
	#AUCT_IDX		number(8,0)

몇개까지 노출할 것인지를 DB 수준에서 관리하지 않는 구조. 5개로 그냥 고정해버린다면 아예 속성 5개 짜리 1개 행 테이블로 만들어 버릴 수도 있음.


---------------------------------------------- 상품 카테고리 관리 ----------------------------------------------------

PRODUCT_CATEGORY
	#IDX		(기본키 인조식별자)
	NAME		(이름)

이외에 카테고리 내 분류라던지 개별 타입의 속성 정의가 필요하면 여러 테이블을 추가해서 구조를 만들어야 함 - 예를들어 '다나와' 사이트의 부품별 속성 처럼.
사실 거래 중개는 상품 자체를 따지지 않고 그냥 거래의 제시로서 다루는 형태라 크게 개의치 않아도 됨.


---------------------------------------------- 판매 (거래 중개. 이하 '판매') 목록 ----------------------------------------------------

SALE
	#IDX			number(9,0)			(기본키 인조식별자)
	ACC_IDX			number(8,0)			(글 올린 계정 번호 참조 외래키)
	TITLE			nvarchar2(40)		(글제목 40자)
	
	WRITTEN_TIME	timestamp (0) with local time zone (등록시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)
	LAST_EDITED		timestamp (0) with local time zone (마지막 수정 시간 기록하려면 넣기. 이것도 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸기)
	
	PRICE			number(7,0)			(가격 천만원 미만)
	AMOUNT			number(7,0)			(수량 천만 단위 미만. 다양한 용량단위를 처리하게..)
	UNIT			nvarchar2(10)		(단위.	파는 단위를 알아서 입력하게 처리하는 방식)
	PRODUCER		nvarchar2(20)		(생산자 20자 까지)
	ORIGIN			nvarchar2(40)		(생산지 40자 이하 - 만일 이것도 시 군 구 별로 막 나눠서 처리하려면 속성을 분리)
	
	CONTENT1							(내용 추가용 속성 예시... 상품 구성이나 보관 방법 등을 따로 속성으로 둘 이유를 잘 모르겠음. 세부 속성들 추가는 적절히 알아서 하기.)
	CONTENT2
	CONTENT3
	
	IMG				varchar2(100 char)	(이미지 위치. 만약 이미지 올리는 갯수를 유연하게 할 생각이면 테이블을 분리한 구조로 만들어야함. 당장은 프로토 타입 테이블이라고 생각하고 합쳐놓음)
	IMG2			varchar2(100 char)
	IMG3			varchar2(100 char)


올린 글의 삭제 요청시 그냥 블라인드 처리를 할 거라면 ISBLIND number(1,0) 같은 속성 추가.


---------------------------------------------- 판매 평가 댓글 ----------------------------------------------------

SALE_RECOMMEND
	#PURCHASE_IDX		number(12,0)	(기본키, 구매목록 식별자 참조 외래키. 구매 건당 연결된 한 번의 평가글 만을 허용하는 구조. 만일 다른식으로 구조를 바꾼다면, 그 방향에 따라서 인조식별자를 추가해야할 것)
	SCORE				number(3,0)		(점수. 100점 만점 점수식. check 제한을 걸어서 100아래로 완전히 제한)

	WRITTEN_TIME		timestamp (0) with local time zone (등록시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸면 되는데, 비추천)
	LAST_EDITED			timestamp (0) with local time zone (마지막 수정 시간 기록하려면 넣기. 이것도 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경. '일'까지만 필요하면 date로 바꾸기)

	CONTENT				nvarchar2(3000)	(댓글내용 3000자 허용.)


---------------------------------------------- 판매글에 대한 문의글 ----------------------------------------------------

일단은 1:1 문의 마냥 한개 문의 글에 1개 답변 형식으로 처리. 만약 문답을 지원하게 하고 싶다면 대댓글 형식으로 하거나 다른 어떤 구조를 가져다 써야 함.
SALE_INQUIRE
	#IDX			number(11,0)	(기본키 인조식별자)
	SALE_IDX		number(9,0)		(판매글번호)
	TITLE			nvarchar2(40)	(글제목 40자)
	CONTENT			nvarchar2(2000)	(글내용 2000자)
	WRITTEN_TIME	timestamp (0) with local time zone (등록시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)

	ANSWER			nvarchar2(2000)	(답변 2000자)
	ANSWER_TIME		timestamp (0) with local time zone (답변시간. 그냥 '초' 까지 넣는걸로 정함. 소수점이 필요하면 괄호 안의 숫자 변경.)

---------------------------------------------- 구매 목록 ----------------------------------------------------
영수증도 여기서 함께 처리(isRefunded)

PURCHASE
	#IDX			number(12,0)	(기본키 인조식별자)
	ACC_IDX			number(8,0)		(계정번호 참조 외래키)
	SALE_IDX		number(9,0)		(판매글번호 참조 외래키)
	
									------ 판매글은 수정이 가능한 구조이기 때문에 글 내용 중 필요한 부분을 저장 ----------
	TITLE			nvarchar2(40)		(글제목 40자)
	PRICE			number(7,0)			(구매 가격 천만원 미만)
	AMOUNT			number(7,0)			(수량 천만 단위 미만. 다양한 용량단위를 처리하게..)
	UNIT			nvarchar2(10)		(단위.	파는 단위를 알아서 입력하게 처리하는 방식)
	PRODUCER		nvarchar2(20)		(생산자 20자 까지)
	ORIGIN			nvarchar2(40)		(생산지 40자 이하 - 만일 이것도 시 군 구 별로 막 나눠서 처리하려면 속성을 분리)

	CONTENT1							(내용 추가용 속성 예시)
	CONTENT2
	CONTENT3

	IMG				varchar2(100 char)	(이미지 위치 예시)
	IMG2			varchar2(100 char)
	IMG3			varchar2(100 char)
									--------------------------------------------------------------------------------------

	STATE			number(2,0)		(구매의 상태 처리용. 배송중,, 구매취소 등등)
	isRefunded		number(1,0)		(구매 상태와는 별개로 환불상태에 대한 처리를 하여 어느시점에서 환불이 일어났는지 기록)

	PAYMENT_TYPE	number(2,0)		(결제 방식..일단은 넣어 둠. 비즈니스 코드 테이블이 하나 필요)
	PAYMENT_NAME	nvarchar2(20)	(결제한 이름)
	PAYMENT_PHONE	number(14,0)	(결제시 입력한 연락처)
	
	DELIVERY_LOC	nvarchar2(50)	(결제시 따로 입력할 배송지 - 만약 시/군/구 와 세부주소를 구분해서 처리하고 싶다면 속성 분리. 일단은 그냥 다 한번에 넣어둠.)
	RECEIVER_NAME	nvarchar2(20)	(받는분 이름)
	RECEIVER_PHONE	number(14,0)	(받는사람 연락처)




