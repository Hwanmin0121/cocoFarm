------------------------------------------------  계정 코드 ----------------------------------------------------
-- 이런 종류의 비즈니스 코드에 시퀀스 처리를 하는게 좀 이상해서 여기는 시퀀스를 안 넣어둠 (동적으로 타입을 정의하고 제어하는 구조가 아니니까..)
-- 1:관리자 2:일반계정 3:사업자계정  으로 일단 생각중.

------------------------------------------------  사업자 정보  ----------------------------------------------------
-- 사업자 등록증에 등록일자가 따로 있으면, 우리쪽에 정보를 입력한 시점을 기록하는 등록일자와 구분해서 하나 더 속성을 추가해야함.

---------------------------------------------- 구매 목록 ----------------------------------------------------
-- 상태 처리용 테이블(상태코드. STATE) 은 일단 안만들어둠. 설명도 필요하고 어떻게 할지 논의가 좀 필요한 부분. 그냥 어플리케이션 로직으로 둘 수도 있으니 당장은 작업 가능하리라 생각함.
-- 결제 타입도 코드로 처리할 모양으로 속성만 넣어두고 실제 테이블은 안 만들어둠.
-- 환불도 따로 테이블을 두지 않는 구조로 일단 만들어둠.
-- 영수증 처리를 해야 하는데 cascade 하는게 맞는지 잘 모르겠음. 애초에 계정 삭제 상황에 대한 부분이 제대로 설계가 안되어 있음.
-- 판매글 지우고 나서 null 로 일단 두는데 어플리케이션에서 null 처리는 알아서...
-- 판 계정이 삭제되면 null 로 세팅하긴 하는데 계정 삭제에 대해서 좀 설계를 해야 함. (사실 그냥 모른척 해도 되고)
-- 아래 평가 댓글 역정규화 외래키 용 unique.


---------------------------------------------- 판매 평가 댓글 ----------------------------------------------------
-- 성능..및 쿼리문의 작성을 용이하게 하기 위해 역정규화를 해둠. (SALE_IDX,PURCHASED_ACC)



------------------------------------------------  장바구니  ----------------------------------------------------
--ACC_IDX 와 SALE_IDX 을 묶어서 기본키 처리. -> 장바구니에 이미 있는 목록에 또 추가버튼을 누르거나 하는 식의 작동방식은 일단 어플리케이션에서 잘 처리해야 함. (아니면 트리거를 쓸 수도 있고.)



------------------------------------------------  오늘의 농부 댓글 ----------------------------------------------------
--	,SUPER_COMMENT			number(11,0)	(대댓글 만들고 싶으면 넣기, 자기 기본키 참조 외래키. scott예제의 직속 상사 코드 같은 형태)